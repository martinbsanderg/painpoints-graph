{"ast":null,"code":"var _jsxFileName = \"/Users/martinbsandberg/Documents/GitHub/painpoints-graph/src/components/flow/flow.component.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from \"react\";\nimport { Controls, Background, applyNodeChanges, applyEdgeChanges, addEdge } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { darkTheme } from \"../../theme.jsx\";\nimport { initialNodes } from \"../node.components.jsx\";\nimport { initialEdges } from \"../edges.component\";\nimport { CustomNode } from \"../custom-nodes/custom-node.component.jsx\";\nimport { StyledFlow, MiniMapStyled } from \"./flow.styles\";\nimport { CustomEdge } from \"../custom-edges/custom-edges.component.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  highLevelNode: CustomNode,\n  specificLevelNode: CustomNode,\n  consequenceNode: CustomNode\n};\nconst edgeTypes = {\n  custom: CustomEdge\n};\nconst Flow = props => {\n  _s();\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [anySelected, setAnySelected] = useState(false);\n  const [relatedNodes, setRelatedNodes] = useState({});\n  const [width, setWidth] = useState(window.innerWidth);\n\n  //Checking for mobile screen\n  function handleWindowSizeChange() {\n    setWidth(window.innerWidth);\n  }\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleWindowSizeChange);\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowSizeChange);\n    };\n  }, []);\n  const isMobile = width <= 768;\n  const onNodesChange = useCallback(changes => setNodes(nds => {\n    const selected = changes.filter(node => node.selected === true);\n    if (selected.length >= 1) {\n      setAnySelected(selected);\n      setRelatedNodes(() => []);\n    } else {\n      setAnySelected(() => false);\n      setRelatedNodes(() => []);\n    }\n    return applyNodeChanges(changes, nds);\n  }), []);\n  useEffect(() => {\n    setNodes(nds => nds.map(node => {\n      anySelected ? node.data.anySelected = true : node.data.anySelected = false;\n      return node;\n    }));\n    return;\n  }, [anySelected]);\n  useEffect(() => {\n    setEdges(edgs => {\n      return edgs.map(edge => {\n        if (!anySelected) {\n          return {\n            ...edge,\n            data: {\n              anySelected: false,\n              connectedToSelected: false\n            }\n          };\n        }\n        const selectedNode = anySelected[0].id;\n        if (edge.target === selectedNode || edge.source === selectedNode) {\n          setRelatedNodes(prev => {\n            const newValue = edge.target === selectedNode ? edge.source : edge.target;\n            return {\n              ...prev,\n              [newValue]: newValue\n            };\n          });\n          return {\n            ...edge,\n            data: {\n              anySelected: true,\n              connectedToSelected: true\n            }\n          };\n        } else {\n          return {\n            ...edge,\n            data: {\n              anySelected: true,\n              connectedToSelected: false\n            }\n          };\n        }\n      });\n    });\n  }, [anySelected]);\n  useEffect(() => {\n    setNodes(nds => nds.map(node => {\n      if (relatedNodes[node.id]) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            relatedToSelected: true\n          }\n        };\n      }\n      return {\n        ...node,\n        data: {\n          ...node.data,\n          relatedToSelected: false\n        }\n      };\n    }));\n  }, [relatedNodes, anySelected]);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  return /*#__PURE__*/_jsxDEV(StyledFlow, {\n    nodes: nodes,\n    onNodesChange: onNodesChange,\n    edges: edges,\n    onEdgesChange: onEdgesChange,\n    nodeTypes: nodeTypes,\n    edgeTypes: edgeTypes,\n    fitView: true,\n    children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), isMobile && /*#__PURE__*/_jsxDEV(MiniMapStyled, {\n      zoomable: true,\n      pannable: true,\n      nodeColor: _ref => {\n        let {\n          type\n        } = _ref;\n        return darkTheme[type].bgC;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(Flow, \"Nve78lGf81Z5mHG6Kmmd7VhPOgg=\");\n_c = Flow;\nexport default Flow;\nvar _c;\n$RefreshReg$(_c, \"Flow\");","map":{"version":3,"names":["useState","useCallback","useEffect","Controls","Background","applyNodeChanges","applyEdgeChanges","addEdge","darkTheme","initialNodes","initialEdges","CustomNode","StyledFlow","MiniMapStyled","CustomEdge","jsxDEV","_jsxDEV","nodeTypes","highLevelNode","specificLevelNode","consequenceNode","edgeTypes","custom","Flow","props","_s","nodes","setNodes","edges","setEdges","anySelected","setAnySelected","relatedNodes","setRelatedNodes","width","setWidth","window","innerWidth","handleWindowSizeChange","addEventListener","removeEventListener","isMobile","onNodesChange","changes","nds","selected","filter","node","length","map","data","edgs","edge","connectedToSelected","selectedNode","id","target","source","prev","newValue","relatedToSelected","onEdgesChange","eds","fitView","children","fileName","_jsxFileName","lineNumber","columnNumber","zoomable","pannable","nodeColor","_ref","type","bgC","_c","$RefreshReg$"],"sources":["/Users/martinbsandberg/Documents/GitHub/painpoints-graph/src/components/flow/flow.component.jsx"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport {\n  Controls,\n  Background,\n  applyNodeChanges,\n  applyEdgeChanges,\n  addEdge,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { darkTheme } from \"../../theme.jsx\";\nimport { initialNodes } from \"../node.components.jsx\";\nimport { initialEdges } from \"../edges.component\";\nimport { CustomNode } from \"../custom-nodes/custom-node.component.jsx\";\nimport { StyledFlow, MiniMapStyled } from \"./flow.styles\";\nimport { CustomEdge } from \"../custom-edges/custom-edges.component.jsx\";\n\nconst nodeTypes = {\n  highLevelNode: CustomNode,\n  specificLevelNode: CustomNode,\n  consequenceNode: CustomNode,\n};\n\nconst edgeTypes = {\n  custom: CustomEdge,\n};\n\nconst Flow = (props) => {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [anySelected, setAnySelected] = useState(false);\n  const [relatedNodes, setRelatedNodes] = useState({});\n  const [width, setWidth] = useState(window.innerWidth);\n\n  //Checking for mobile screen\n  function handleWindowSizeChange() {\n    setWidth(window.innerWidth);\n  }\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleWindowSizeChange);\n    return () => {\n      window.removeEventListener(\"resize\", handleWindowSizeChange);\n    };\n  }, []);\n  const isMobile = width <= 768;\n  \n\n  const onNodesChange = useCallback(\n    (changes) =>\n      setNodes((nds) => {\n        const selected = changes.filter((node) => node.selected === true);\n        if (selected.length >= 1) {\n          setAnySelected(selected);\n          setRelatedNodes(() => []);\n        } else {\n          setAnySelected(() => false);\n          setRelatedNodes(() => []);\n        }\n        return applyNodeChanges(changes, nds);\n      }),\n    []\n  );\n\n  useEffect(() => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        anySelected\n          ? (node.data.anySelected = true)\n          : (node.data.anySelected = false);\n        return node;\n      })\n    );\n    return;\n  }, [anySelected]);\n\n  useEffect(() => {\n    setEdges((edgs) => {\n      return edgs.map((edge) => {\n        if (!anySelected) {\n          return {\n            ...edge,\n            data: { anySelected: false, connectedToSelected: false },\n          };\n        }\n        const selectedNode = anySelected[0].id;\n\n        if (edge.target === selectedNode || edge.source === selectedNode) {\n          setRelatedNodes((prev) => {\n            const newValue =\n              edge.target === selectedNode ? edge.source : edge.target;\n            return { ...prev, [newValue]: newValue };\n          });\n\n          return {\n            ...edge,\n            data: { anySelected: true, connectedToSelected: true },\n          };\n        } else {\n          return {\n            ...edge,\n            data: { anySelected: true, connectedToSelected: false },\n          };\n        }\n      });\n    });\n  }, [anySelected]);\n\n  useEffect(() => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (relatedNodes[node.id]) {\n          return { ...node, data: { ...node.data, relatedToSelected: true } };\n        }\n        return { ...node, data: { ...node.data, relatedToSelected: false } };\n      })\n    );\n  }, [relatedNodes, anySelected]);\n\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  return (\n    <StyledFlow\n      nodes={nodes}\n      onNodesChange={onNodesChange}\n      edges={edges}\n      onEdgesChange={onEdgesChange}\n      nodeTypes={nodeTypes}\n      edgeTypes={edgeTypes}\n      fitView\n    >\n      <Background />\n      <Controls />\n      {isMobile && <MiniMapStyled\n        zoomable\n        pannable\n        nodeColor={({ type }) => darkTheme[type].bgC}\n      />}\n    </StyledFlow>\n  );\n};\n\nexport default Flow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}